# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nRlC02SQfA0Li5m0ajFHmwGg8VoII42p
"""

!pip install -U langchain-community
!pip install langchain_text_splitters
!pip install langchain-huggingface
!pip install chromadb
!pip install langchain_google_genai
!pip install protobuf
!pip install sentence-transformers

import urllib
import warnings
from pathlib import Path as p
from pprint import pprint

import pandas as pd
from langchain import PromptTemplate
from langchain.chains.question_answering import load_qa_chain
#from langchain_community.document_loaders import PyPDFLoader
from langchain_text_splitters import RecursiveJsonSplitter

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import Chroma
from langchain.chains import RetrievalQA
import google.generativeai as genai
from langchain_google_genai import ChatGoogleGenerativeAI

import google.generativeai as genai
import os
warnings.filterwarnings("ignore")

"""**this block of code to test your api key and model is working or not **"""

from IPython.display import display
from IPython.display import Markdown
import textwrap
import os

def to_markdown(text):
  text = text.replace('â€¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))


GOOGLE_API_KEY="your_api_key_here"
genai.configure(api_key=GOOGLE_API_KEY)



model1 = genai.GenerativeModel(model_name = "gemini-2.0-flash-exp")



response = model1.generate_content("What are the usecases of LLMs?")


to_markdown(response.text)

available_models = genai.list_models()
for model in available_models:
    print(model)

"""**Initializing Chat Model:** The script sets up a chat model with specific configurations."""

from langchain_google_genai import ChatGoogleGenerativeAI

model = ChatGoogleGenerativeAI(
    model="gemini-1.5-flash-002",  # Use the correct model name
    google_api_key=GOOGLE_API_KEY,
    temperature=0.6,
    convert_system_message_to_human=True
)

"""**difine Embeddings modal **
This code essentially sets up a way to convert text into numerical representations (embeddings) using a specific pre-trained model from Hugging Face
"""

from langchain_huggingface import HuggingFaceEmbeddings

embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")

"""**Loading JSON Data:** A function to load JSON data from a file is defined and used."""

import json

def load_json_file(file_path):
  """Loads a JSON file and returns its content as a Python dictionary.

  Args:
    file_path: The path to the JSON file.

  Returns:
    A Python dictionary representing the JSON data, or None if an error occurs.
  """
  try:
    with open(file_path, 'r') as f:
      data = json.load(f)
    return data
  except FileNotFoundError:
    print(f"Error: File not found at {file_path}")
    return None
  except json.JSONDecodeError:
    print(f"Error: Invalid JSON format in {file_path}")
    return None

# Example usage:
file_path = '/content/menu_incoming_json_log.json' # Replace with your file path
data = load_json_file(file_path)

"""**Splitting JSON Data:** The data is split into chunks using RecursiveJsonSplitter.

python
Copy code

"""

import json
pages = RecursiveJsonSplitter(max_chunk_size =1500)
#documents = pages.split_text(json.dumps(data))
document = pages.split_text(data)
len(document)
print(document[0])

"""**Creating Document Objects:** The split data is converted into Document objects."""

# text_splitter = RecursiveJsonSplitter(max_chunk_size=300)
# context = [json.loads(d.page_content) for d in document]
from langchain.docstore.document import Document

texts = [Document(page_content=d) for d in document]

texts = list(map(lambda x: x.page_content.replace("\n", " "), texts))

"""**Creating Vector Index:** A vector index is created from the texts using Chroma and embeddings."""

vector_index = Chroma.from_texts(texts, embeddings).as_retriever(search_kwargs={"k":5})

"""# Question Answering System
**Defining Prompt Template:** A prompt template for the question-answering chain is defined.

python
Copy code

"""

# Define the enhanced prompt template
template = """
You are an expert virtual assistant with a friendly and professional tone. Use the provided information to answer the question thoughtfully and accurately. If the answer is not available, please say so honestly. Conclude every response with a positive note.

Here is the context:
{context}

Question: {question}

Detailed and Helpful Answer:
"""
QA_CHAIN_PROMPT = PromptTemplate.from_template(template)# Run chain

"""**Initializing QA Chain:** The QA chain is set up with the model and vector index."""

qa_chain = RetrievalQA.from_chain_type(
    model,
    retriever=vector_index,
    return_source_documents=True,
    chain_type_kwargs={"prompt": QA_CHAIN_PROMPT}
)

question = "List all beverages under the category Hot Coffee"
result = qa_chain({"query": question})
Markdown(result["result"])

"""**Running QA Chain:** A sample question is used to run the QA chain and display the result."""

Markdown(result["result"])

"""# some awsome saved repond

**input_question -** all beverages under the category Hot Coffee

**output_answer-**

Certainly! Here's a list of all the beverages under the "Hot Coffee" category, based on the provided data:

*  Araku Filter Coffee Regular

* Araku Espresso Regular

* Araku Cappuccino Regular

* Araku Latte Regular

* Araku Espresso Mocha Regular

* Hot Milk Regular

* Hot Chocolate Regular

* Araku Filter Coffee Large

* Araku Espresso Large

* Araku Cappuccino Large

* Araku Latte Large

* Araku Espresso Mocha Large

* Araku Americano Large

Please note that some items listed under "Hot Coffee" may be out of stock, according to the instock field in the data. Always check for availability before ordering.

Have a wonderfully productive day!
"""

#set of questions to evavulate the RAG with correc t answer
'''What are the available beverages with the Jain Sabji Roti Thali?

The available beverages with the Jain Sabji Roti Thali are:
Hand Made Tea
Araku Filter Coffee
Masala Chaas
Is the Veg Dal Rice Thali currently in stock?

Yes, the Veg Dal Rice Thali is in stock.
What is the stock SLA for the Veg Biryani Thali?

The stock SLA for the Veg Biryani Thali is 900.

Availability and Status:

Is the Pani Puri (8 Pc) available in stock?

No, the Pani Puri (8 Pc) is not in stock.
What is the status of the Dahi Puri (8 Pc)?

The status of the Dahi Puri (8 Pc) is ACTIVE.

Category and Description:

What is the category of the Samosa (2pcs)?

The category of the Samosa (2pcs) is Snacks.
Describe the Classic Iced Cold Coffee.

The Classic Iced Cold Coffee contains Veg, has a price of 350, and is currently in stock.


Filtering by Category:

List all items available under the category "Street Food".

Pani Puri (8 Pc)
Dahi Puri (8 Pc)
Sev Puri (8 Pc)
Bhel Puri
Sukha Bhel
List all beverages under the category "Hot Coffee".

Araku Filter Coffee Regular
Araku Espresso Regular
Araku Cappuccino Regular
Araku Latte Regular
Araku Espresso Mocha Regular
Hot Milk Regular
Hot Chocolate Regular
Araku Filter Coffee Large
Araku Espresso Large
Araku Cappuccino Large
Araku Latte Large
Araku Espresso Mocha Large
Miscellaneous:

What is the tax rate applied to the products?

The tax rate applied to the products is 5.
c

The products currently in the "Jain Specials" category are:

Jain Pani Puri (8 Pc)
Jain Dahi Puri (8 Pc)
Jain Sukha Bhel
Jain Dhokla (4 Pc)
Jain Thepla (4 Pc)
Jain Sandwich
Jain Grill Sandwich
Jain Cheese Grill Sandwich
Jain Paneer Cheese Grill Sandwich
Jain Bhel Puri
There are 10 products in the "Jain Specials" category.''
