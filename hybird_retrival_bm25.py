# -*- coding: utf-8 -*-
"""hybird_retrival_BM25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sASWg1UQMfiecTlOivl70P9IK_I5fqPU
"""

"""
# The pipeline contains a component that is only available in deepset Cloud. These components
# are optimized to run in a could environment, but you can replace them with the local OSS
# version. Check the docs of the component. We provide local examples there.
"""
from haystack import Pipeline
from haystack.components.routers.file_type_router import FileTypeRouter
from haystack.components.converters.txt import TextFileToDocument
from haystack.components.converters.pdfminer import PDFMinerToDocument
from haystack.components.converters.html import HTMLToDocument
from haystack.components.converters.docx import DOCXToDocument
from haystack.components.converters.pptx import PPTXToDocument
from haystack.components.converters.xlsx import XLSXToDocument
from haystack.components.converters.csv import CSVToDocument
from haystack.components.joiners.document_joiner import DocumentJoiner
from haystack.components.preprocessors.document_splitter import DocumentSplitter
from deepset_cloud_custom_nodes.embedders.nvidia.document_embedder import DeepsetNvidiaDocumentEmbedder
from haystack.utils import Secret
from haystack_integrations.components.embedders.nvidia.text_embedder import NvidiaTextEmbedder
from haystack_integrations.document_stores.opensearch.document_store import OpenSearchDocumentStore
from haystack_integrations.components.retrievers.opensearch.bm25_retriever import OpenSearchBM25Retriever
from haystack_integrations.components.retrievers.opensearch.embedding_retriever import OpenSearchEmbeddingRetriever
from haystack_integrations.components.rankers.nvidia.ranker import NvidiaRanker
from haystack.components.builders.prompt_builder import PromptBuilder
from haystack_integrations.components.generators.google_ai.gemini import GoogleAIGeminiGenerator
from haystack.components.builders.answer_builder import AnswerBuilder

file_classifier = FileTypeRouter(mime_types=["text/plain", "application/pdf", "text/markdown", "text/html", "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "application/vnd.openxmlformats-officedocument.presentationml.presentation", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "text/csv"])
text_converter = TextFileToDocument(encoding="utf-8")
pdf_converter = PDFMinerToDocument(line_overlap=0.5, char_margin=2, line_margin=0.5, word_margin=0.1, boxes_flow=0.5, detect_vertical=True, all_texts=False, store_full_path=False)
markdown_converter = TextFileToDocument(encoding="utf-8")
html_converter = HTMLToDocument(extraction_kwargs={"output_format": "markdown", "target_language": None, "include_tables": True, "include_links": True})
docx_converter = DOCXToDocument()
pptx_converter = PPTXToDocument()
xlsx_converter = XLSXToDocument()
csv_converter = CSVToDocument(encoding="utf-8")
joiner = DocumentJoiner(join_mode="concatenate", sort_by_score=False)
joiner_xlsx = DocumentJoiner(join_mode="concatenate", sort_by_score=False)
splitter = DocumentSplitter(split_by="word", split_length=250, split_overlap=30, respect_sentence_boundary=True, language="en")
document_embedder = DeepsetNvidiaDocumentEmbedder(model="intfloat/e5-base-v2", normalize_embeddings=True)
nvidiatextembedder = NvidiaTextEmbedder(api_key=Secret.from_token(["NVIDIA_API_KEY"], strict=False), api_url="https://ai.api.nvidia.com/v1/retrieval/nvidia", prefix="", suffix="")
opensearchdocumentstore = OpenSearchDocumentStore(index="default", max_chunk_bytes=104857600, embedding_dim=768, return_embedding=False, create_index=True)
opensearchbm25retriever = OpenSearchBM25Retriever(fuzziness="AUTO", top_k=10, scale_score=False, all_terms_must_match=False, filter_policy="replace", raise_on_failure=True)
opensearchembeddingretriever = OpenSearchEmbeddingRetriever(top_k=10, filter_policy="replace", raise_on_failure=True, efficient_filtering=False)
documentjoiner_2 = DocumentJoiner(join_mode="concatenate", sort_by_score=True)
nvidiaranker = NvidiaRanker(api_key=Secret.from_token(["NVIDIA_API_KEY"], strict=False), top_k=5, query_prefix="", document_prefix="", embedding_separator="\\n")
promptbuilder = PromptBuilder(template="{% for document in documents %}\n    Document[{{ loop.index }}]:\n        {{ document.content }}\n{% endfor %}\n\nQuestion: {{query}}\n\nAnswer:", required_variables={"required_variables": ["question", "documents"]})
googleaigeminigenerator = GoogleAIGeminiGenerator(api_key=Secret.from_token(["GOOGLE_API_KEY"], strict=False), model="gemini-1.5-flash", generation_config="")
answerbuilder = AnswerBuilder()

pipeline = Pipeline()
pipeline.add_component("file_classifier", file_classifier)
pipeline.add_component("text_converter", text_converter)
pipeline.add_component("pdf_converter", pdf_converter)
pipeline.add_component("markdown_converter", markdown_converter)
pipeline.add_component("html_converter", html_converter)
pipeline.add_component("docx_converter", docx_converter)
pipeline.add_component("pptx_converter", pptx_converter)
pipeline.add_component("xlsx_converter", xlsx_converter)
pipeline.add_component("csv_converter", csv_converter)
pipeline.add_component("joiner", joiner)
pipeline.add_component("joiner_xlsx", joiner_xlsx)
pipeline.add_component("splitter", splitter)
pipeline.add_component("document_embedder", document_embedder)
pipeline.add_component("nvidiatextembedder", nvidiatextembedder)
pipeline.add_component("opensearchdocumentstore", opensearchdocumentstore)
pipeline.add_component("opensearchbm25retriever", opensearchbm25retriever)
pipeline.add_component("opensearchembeddingretriever", opensearchembeddingretriever)
pipeline.add_component("documentjoiner_2", documentjoiner_2)
pipeline.add_component("nvidiaranker", nvidiaranker)
pipeline.add_component("promptbuilder", promptbuilder)
pipeline.add_component("googleaigeminigenerator", googleaigeminigenerator)
pipeline.add_component("answerbuilder", answerbuilder)
pipeline.connect("file_classifier.text/plain", "text_converter.sources")
pipeline.connect("file_classifier.application/pdf", "pdf_converter.sources")
pipeline.connect("file_classifier.text/markdown", "markdown_converter.sources")
pipeline.connect("file_classifier.text/html", "html_converter.sources")
pipeline.connect("file_classifier.application/vnd", "docx_converter.sources")
pipeline.connect("file_classifier.application/vnd", "pptx_converter.sources")
pipeline.connect("file_classifier.application/vnd", "xlsx_converter.sources")
pipeline.connect("file_classifier.text/csv", "csv_converter.sources")
pipeline.connect("text_converter.documents", "joiner.documents")
pipeline.connect("pdf_converter.documents", "joiner.documents")
pipeline.connect("markdown_converter.documents", "joiner.documents")
pipeline.connect("html_converter.documents", "joiner.documents")
pipeline.connect("docx_converter.documents", "joiner.documents")
pipeline.connect("pptx_converter.documents", "joiner.documents")
pipeline.connect("joiner.documents", "splitter.documents")
pipeline.connect("splitter.documents", "joiner_xlsx.documents")
pipeline.connect("xlsx_converter.documents", "joiner_xlsx.documents")
pipeline.connect("csv_converter.documents", "joiner_xlsx.documents")
pipeline.connect("joiner_xlsx.documents", "document_embedder.documents")
pipeline.connect("nvidiatextembedder.embedding", "opensearchembeddingretriever.query_embedding")
pipeline.connect("opensearchbm25retriever.documents", "documentjoiner_2.documents")
pipeline.connect("opensearchembeddingretriever.documents", "documentjoiner_2.documents")
pipeline.connect("documentjoiner_2.documents", "nvidiaranker.documents")
pipeline.connect("nvidiaranker.documents", "promptbuilder.documents")
pipeline.connect("promptbuilder.prompt", "googleaigeminigenerator.parts")
pipeline.connect("googleaigeminigenerator.replies", "answerbuilder.replies")
pipeline.connect("opensearchdocumentstore.document_store", "opensearchbm25retriever.document_store")
pipeline.connect("opensearchdocumentstore.document_store", "opensearchembeddingretriever.document_store")

# Documentation:
# To run the pipeline, use the pipeline.run() method with the appropriate data.
# Here is an example on how to execute the pipeline:
# The pipeline is defined and loaded above. To execute it, use:
result = pipeline.run(data={"nvidiatextembedder":{"text":"..."},"opensearchbm25retriever":{"query":"..."},"nvidiaranker":{"query":"..."},"promptbuilder":{"query":"..."},"answerbuilder":{"query":"..."},"file_classifier":{"sources":"..."}})